frameworkVersion: ${file(serverless/common/base.yml):frameworkVersion}
service: ${env:APP_NAME_2, 'exampleApp2'}
useDotenv: true
plugins: ${file(serverless/common/plugins.yml):plugins}

package:
  individually: true

custom:
  seed: ${file(serverless/common/custom.yml):seed}
  accountId: ${file(serverless/common/custom.yml):accountId}
  env: ${file(serverless/common/custom.yml):env}
  logRetentionInDays: ${file(serverless/common/custom.yml):logRetentionInDays}
  webpack: ${file(serverless/common/custom.yml):webpack}
  stepFunctionsLocal: ${file(serverless/common/custom.yml):stepFunctionsLocal}
  inputBucketName: ${file(serverless/common/custom.yml):inputBucketName}
  extractedFilesBucketName: ${file(serverless/common/custom.yml):extractedFilesBucketName}
  infraService: ${env:COMMON_APP_NAME, 'exampleAppCommon'}
  service:
    this: ${self:service}
    infra: ${env:APP_NAME}
provider:
  name: ${file(serverless/common/provider.yml):name}
  runtime: ${file(serverless/common/provider.yml):runtime}
  region: ${file(serverless/common/provider.yml):region}
  stage: ${file(serverless/common/provider.yml):stage}
  memorySize: ${file(serverless/common/provider.yml):memorySize}
  timeout: ${file(serverless/common/provider.yml):timeout}
  environment:
    APP_NAME: ${env:APP_NAME, 'tshAcademySlsWorkshops'}
    AWS_LAMBDAS_REGION: ${env:AWS_LAMBDAS_REGION, 'eu-west-1'}
    DDB_TABLE_NAME: ${self:custom.service.infra}-test-ddb-table-${self:custom.env}
  iamRoleStatements: ${file(serverless/common/provider.yml):iamRoleStatements}

functions:
  - ${file(functions/api-hello-world/function.yml)}
  - ${file(functions/cron-update-dynamodb/function.yml)}
  - ${file(functions/scan-file/function.yml)}
  - ${file(workflows/scan-cv-workflow/copy-file/function.yml)}
  - ${file(workflows/scan-cv-workflow/check-node-experience/function.yml)}
  - ${file(workflows/scan-cv-workflow/check-it-experience/function.yml)}
  - ${file(workflows/scan-cv-workflow/check-cloud-experience/function.yml)}
  - ${file(workflows/scan-cv-workflow/check-exclude-list/function.yml)}
  - ${file(workflows/scan-cv-workflow/calculate-score/function.yml)}
  - ${file(workflows/scan-cv-workflow/extract-text/function.yml)}

stepFunctions:
  stateMachines:
    ScanCvWorkflow: ${file(workflows/scan-cv-workflow/workflow.yml)}

resources:
  Outputs:
    ScanCvWorkflowStateMachine:
      Description: Scan CV workflow state machine Arn
      Value:
        Ref: ScanCvWorkflow${self:service}${opt:stage, 'dev'}
    ApiUri:
      Value: !GetAtt HttpApi.ApiEndpoint # !Sub "https://${HttpApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/"
  Resources:
    scanSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}ScanFailedTopic${self:provider.stage}
    inputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.inputBucketName}
    extractedFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.extractedFilesBucketName}
    ScanCvWorkflowStateMachineRole: ${file(workflows/scan-cv-workflow/workflow.iam.yml)}

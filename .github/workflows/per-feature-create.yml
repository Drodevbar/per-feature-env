name: Create per-feature environment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 16

jobs:
  run-linter-and-unit-tests:
    runs-on: ubuntu-latest
    name: Run linter and unit tests

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: ./.github/actions/setup-node
        with:
          node_version: ${{ env.NODE_VERSION }}

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

  get-stage-name:
    uses: ./.github/workflows/get-stage-name.yml

  create-per-feature-environment:
    runs-on: ubuntu-latest
    name: Create per-feature environment
    needs: [run-linter-and-unit-tests, get-stage-name]

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: ./.github/actions/setup-node
        with:
          node_version: ${{ env.NODE_VERSION }}

      - name: Start the deployment
        uses: bobheadxi/deployments@v1.2.0
        id: start-deployment
        with:
          step: start
          env: ${{ needs.get-stage-name.outputs.stage }}

      - name: Deploy to stage ${{ needs.get-stage-name.outputs.stage }}
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.DEV_AWS_DEFAULT_REGION }}
          ACCOUNT_ID: ${{ vars.DEV_AWS_ACCOUNT_ID }}
        run: | 
          npx sls deploy --stage ${{ needs.get-stage-name.outputs.stage }}
          api_uri=$(aws cloudformation describe-stacks --stack-name ${{ vars.APP_NAME }}-${{ needs.get-stage-name.outputs.stage }} --query "Stacks[0].Outputs[?OutputKey=='ApiUri'].OutputValue" --output text)
          echo api_uri=$api_url >> $GITHUB_OUTPUT

      - name: Update the deployment status
        uses: bobheadxi/deployments@v1.2.0
        id: finalize-deployment
        if: always()
        with:
          step: finish
          debug: true
          status: ${{ job.status }}
          env: ${{ steps.start-deployment.outputs.env }}
          deployment_id: ${{ steps.start-deployment.outputs.deployment_id }}
          env_url: ${{ steps.deploy.outputs.api_uri }}
